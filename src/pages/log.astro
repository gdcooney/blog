---
import Layout from "@/layouts/Layout.astro";
import { SITE } from "@/config.mjs";

const pageTitle = "Log Something";
const LOG_ENDPOINT = import.meta.env.PUBLIC_LOG_ENDPOINT!;
---

<Layout title={pageTitle} description="Capture a new log entry">
  <section class="section">
    <div class="content">
      <h1 class="h1">üìù {pageTitle}</h1>

      <form id="log-form" class="space-y-4" data-endpoint={import.meta.env.PUBLIC_LOG_ENDPOINT} data-key={import.meta.env.PUBLIC_SUPABASE_ANON_KEY}>
        <label>
          Category:
          <input name="category" type="text" required class="input" />
        </label>

        <label>
          Tags (comma-separated):
          <input name="tags" type="text" class="input" />
        </label>

        <label>
          Notes:
          <textarea name="notes" class="input"></textarea>
        </label>

        <label>
          Sleep (hrs):
          <input name="sleep" type="number" step="0.1" class="input" />
        </label>

        <label>
          Mood:
          <input name="mood" type="text" class="input" />
        </label>

        <label>
          Exercise:
          <input name="exercise" type="text" class="input" />
        </label>

        <label>
          Food (comma-separated):
          <input name="food" type="text" class="input" />
        </label>

        <button type="submit" class="button">Submit</button>
      </form>

      <p id="response-msg" class="mt-4 text-green-600 hidden">‚úÖ Log submitted successfully!</p>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('log-form');
      const msg = document.getElementById('response-msg');

      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);

        const payload = {
          category: formData.get("category"),
          tags: formData.get("tags")?.split(",").map(t => t.trim()).filter(Boolean),
          notes: formData.get("notes"),
          data: {
            sleep: parseFloat(formData.get("sleep") || 0),
            mood: formData.get("mood"),
            exercise: formData.get("exercise"),
            food: formData.get("food")?.split(",").map(f => f.trim()).filter(Boolean)
          }
        };
	const endpoint = form.dataset.endpoint;
        const anonKey = form.dataset.key;
	const res = await fetch(endpoint, {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "Authorization": "Bearer " + anonKey
	 },
          body: JSON.stringify(payload)
        });

        if (res.ok) {
          form.reset();
          msg.classList.remove("hidden");
        } else {
          alert("‚ö†Ô∏è Error submitting log.");
        }
      });
    });
  </script>
</Layout>

