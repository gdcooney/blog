---
import Layout from "src/layouts/Layout.astro";
import Header from "src/components/Header.astro";
import Footer from "src/components/Footer.astro";
---

<Layout>
  <Header />
  <body class="px-4 py-8 max-w-3xl mx-auto">
    <h1 class="text-2xl font-bold mb-6">Submit a Post</h1>

    <form id="blog-form" class="space-y-4">
      <div class="flex flex-col sm:flex-row sm:items-center sm:space-x-4">
        <div class="flex-1">
          <label for="title" class="block font-medium">Title</label>
          <input type="text" id="title" required class="w-full px-3 py-2 border rounded bg-gray-900 text-white" />
        </div>

        <div class="w-full sm:w-1/3 mt-4 sm:mt-0">
          <label for="date" class="block font-medium">Date</label>
          <input type="date" id="date" class="w-full px-3 py-2 border rounded bg-gray-900 text-white" />
        </div>
      </div>

      <div>
        <label for="tags" class="block font-medium">Tags</label>
        <input type="text" id="tags" placeholder="comma,separated,tags" class="w-full px-3 py-2 border rounded bg-gray-900 text-white" />
      </div>

      <div>
        <label for="content" class="block font-medium">Markdown</label>
        <textarea id="content" rows="15" class="w-full px-3 py-2 border rounded bg-gray-900 text-white"></textarea>
      </div>

      <div class="text-right">
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Submit</button>
      </div>
    </form>

    {/* Client-side script with corrections */}
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById("blog-form");
        if (!(form instanceof HTMLFormElement)) {
          console.error("Form not found or is not a form element");
          return;
        }

        form.addEventListener("submit", async (e) => {
          e.preventDefault();

          // Get form elements
          const titleEl = document.getElementById("title") as HTMLInputElement | null;
          const dateEl = document.getElementById("date") as HTMLInputElement | null; // Assuming you might need date later
          const tagsEl = document.getElementById("tags") as HTMLInputElement | null;
          const contentEl = document.getElementById("content") as HTMLTextAreaElement | null;

          // Basic validation
          if (!titleEl || !tagsEl || !contentEl || !titleEl.value || !contentEl.value) {
            alert("Missing required form fields (Title and Markdown Content)");
            return;
          }

          const title = titleEl.value.trim().replace(/\s+/g, "-").toLowerCase();
          const tags = tagsEl.value; // Use as needed
          const content = contentEl.value;
          // const date = dateEl?.value; // Use as needed

          // Ensure filename ends with .md as expected by the API
          const filename = `${title}.md`;

          try {
            // Step 1: Get a presigned URL from your API
            console.log(`Requesting presigned URL for filename: ${filename}`);
            const res = await fetch("/api/get-presigned-url", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                filename: filename // Use lowercase 'filename' key
              }),
            });

            if (!res.ok) {
              const errorData = await res.json().catch(() => ({})); // Try to parse error JSON
              console.error("Failed to get presigned URL:", res.status, errorData);
              alert(`Failed to get presigned URL: ${errorData.error || res.statusText || 'Unknown error'}`);
              return;
            }

            // Your API returns { url: signedUrl }
            const { url: presignedUrl } = await res.json();
            console.log("Received presigned URL:", presignedUrl);

            // Step 2: Upload the file content to S3 using the presigned URL
            console.log("Uploading content to S3...");
            const uploadRes = await fetch(presignedUrl, { // Use the URL directly
              method: "PUT",                            // Use PUT for PutObjectCommand URLs
              headers: {
                // ContentType must match what was used to generate the URL on the server
                'Content-Type': 'text/markdown'
              },
              body: new Blob([content], { type: "text/markdown" }) // Send content as Blob
            });

            if (uploadRes.ok) {
              console.log("Upload successful!");
              alert("Upload complete!");
              form.reset(); // Clear the form
            } else {
              // Attempt to get error details from S3 response (often XML)
              const errorText = await uploadRes.text().catch(() => "Could not read S3 error response");
              console.error("S3 Upload failed:", uploadRes.status, uploadRes.statusText, errorText);
              alert(`Upload failed: ${uploadRes.status} ${uploadRes.statusText}`);
            }

          } catch (error) {
              console.error("An error occurred during the submission process:", error);
              alert("An unexpected error occurred. Please check the console.");
          }
        }); // End of submit event listener
      }); // End of DOMContentLoaded listener
    </script>

  </body>
  <Footer />
</Layout>
